# -*- coding: utf-8 -*-
"""task2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fpx2B90k7fK_z1fGrrcEXT5ULPBCGg7N
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

# MNIST 데이터셋을 로드하고 전처리
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# 데이터 형태를 (784,)로 변환하고, 0~1 범위로 정규화
x_train = x_train.reshape(-1, 784).astype('float32') / 255.0
x_test = x_test.reshape(-1, 784).astype('float32') / 255.0

# 레이블 데이터를 원-핫 인코딩
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# 모델
model = Sequential([
    # 은닉층: 128 뉴런, ReLU 활성화 함수
    Dense(128, activation='relu', input_shape=(784,)),
    # 출력층: 10 뉴런, softmax 활성화 함수
    Dense(10, activation='softmax')
])

# 모델을 컴파일합니다.
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# 모델훈련
history = model.fit(x_train, y_train, batch_size=32, epochs=5, validation_split=0.2)

# 모델을 평가, 테스트 정확도 출력
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {test_accuracy:.4f}")

# 테스트 데이터 첫 번째 샘플에 대한 모델의 예측 값과 실제 값을 출력
prediction = model.predict(x_test[:1])
print("Predicted class:", tf.argmax(prediction, axis=1).numpy())
print("Actual class:", tf.argmax(y_test[:1], axis=1).numpy())